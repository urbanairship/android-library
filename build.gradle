buildscript {
    ext {
        // Airship Version - major.minor.patch
        airshipVersion = '19.13.5'

        // Airship Version Qualifier beta, release, etc...
        // airshipVersionQualifier = "alpha"

        // Android SDK Versions
        minSdkVersion = 23
        compileSdkVersion = 36
        targetSdkVersion = 35

        // Looking for dependency versions?
        // See: ./gradle/libs.versions.toml
    }

    dependencies {
        classpath "com.android.tools.build:gradle:${libs.versions.androidGradlePlugin.get()}"
        classpath "com.google.gms:google-services:${libs.versions.googleServicesPlugin.get()}"
        classpath "org.jetbrains.kotlin:kotlin-allopen:${libs.versions.kotlin.get()}"
    }
}

plugins {
    id 'airship-publish'
    id 'org.jetbrains.dokka'

    alias(libs.plugins.benmanes.versions)
    alias(libs.plugins.spotless)
}

dependencies {
    dokkaPlugin(libs.dokka.android)

    dokka(project(":urbanairship-adm"))
    dokka(project(":urbanairship-automation"))
    dokka(project(":urbanairship-automation-compose"))
    dokka(project(":urbanairship-core"))
    dokka(project(":urbanairship-fcm"))
    dokka(project(":urbanairship-hms"))
    dokka(project(":urbanairship-live-update"))
    dokka(project(':urbanairship-message-center'))
    dokka(project(':urbanairship-message-center-core'))
    dokka(project(":urbanairship-preference-center"))
    dokka(project(":urbanairship-preference-center-core"))
    dokka(project(":urbanairship-preference-center-compose"))
    dokka(project(":urbanairship-feature-flag"))
}

dokka {
    moduleName.set("Airship Android SDK")

    dokkaPublications.html {
        suppressInheritedMembers.set(false)
        outputDirectory.set(rootProject.layout.buildDirectory.dir("docs/kdoc"))
    }

    pluginsConfiguration.html {
        customAssets.from("$rootDir/docs/dokka/logo-icon.svg")
        footerMessage.set("Â©${Year.now().value} Airship")
    }
}

tasks.register("packageKDoc", Tar) {
    dependsOn("dokkaGenerate")
    group = JavaBasePlugin.DOCUMENTATION_GROUP
    description = "Generates documentation in KDoc format"

    into("./") {
        from("build/docs/kdoc")
    }

    archiveFileName.set("${rootProject.property("airshipVersion")}-kdoc.tar.gz")
    destinationDirectory.set(file("build/docs"))
    archiveExtension.set("tar.gz")
    compression = Compression.GZIP
}

tasks.register("packageDocs") {
    dependsOn("packageKDoc")
    group = JavaBasePlugin.DOCUMENTATION_GROUP
    description = "Generate KDoc archives for release"
}

tasks.register('getVersion') {
    doLast {
        def version = airshipVersion
        if (project.hasProperty("airshipVersionQualifier")) {
            version += "-" + airshipVersionQualifier
        }
        println version
    }
}

// TODO: need to update ktlint for compatibility with kotlin 1.9, but they've changed
// how to configure it. Disabling ktlint for now, and we'll revisit later.
spotless {
    java {
        target '**/*.java'
        targetExclude '.idea/**'

        trimTrailingWhitespace()
        leadingTabsToSpaces()
        endWithNewline()
    }
    def ktlintVersion = libs.versions.ktlint.get()
    def ktlintUserData = [
        'android': 'true',
        'max_line_length': 'off',
        // Match Android Kotlin style guide import order.
        // https://developer.android.com/kotlin/style-guide
        'kotlin_imports_layout': 'ascii',
        // Disable 'indent' to avoid overly aggressive wrapping of function parameters.
        'disabled_rules': 'indent'
    ]
    kotlin {
        target '**/*.kt'
        targetExclude '.idea/**', 'buildSrc/**'

        //ktlint(ktlintVersion).userData(ktlintUserData)

        trimTrailingWhitespace()
        leadingTabsToSpaces()
        endWithNewline()
    }
    kotlinGradle {
        target 'buildSrc/**/*.kts', 'buildSrc/**/*.kt'
        targetExclude 'buildSrc/build/**'

        //ktlint(ktlintVersion).userData(ktlintUserData)

        trimTrailingWhitespace()
        leadingTabsToSpaces()
        endWithNewline()
    }
}

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

tasks.named("dependencyUpdates").configure {
    it.rejectVersionIf {
        isNonStable(it.candidate.version)
    }
}
