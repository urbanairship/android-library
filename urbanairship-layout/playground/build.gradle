import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.dataformat.yaml.YAMLFactory

buildscript {
    ext {
        jacksonVersion='2.9.8'
    }

    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }

    dependencies {
        classpath "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$jacksonVersion"
    }
}

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    alias(libs.plugins.compose.compiler)
}

group = "com.urbanairship.android"

android {
    compileSdk rootProject.compileSdkVersion

    defaultConfig {
        applicationId "com.urbanairship.android.layout.playground"
        minSdk rootProject.minSdkVersion
        targetSdk rootProject.targetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            assets.srcDirs += file("$buildDir/generated/sample_layout_assets/")
        }
    }

    buildFeatures {
        viewBinding true
        compose true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
    namespace 'com.urbanairship.android.layout.playground'
}

dependencies {
    implementation project(":urbanairship-automation-compose")

    // Kotlin
    implementation(libs.kotlinx.coroutines.android)

    // Compose
    implementation(platform(libs.compose.bom))
    implementation(libs.compose.foundation)
    implementation(libs.compose.runtime)
    implementation(libs.compose.ui)
    implementation(libs.compose.ui.graphics)
    implementation(libs.compose.animation)
    implementation(libs.compose.material3)

    implementation(libs.compose.ui.tooling.preview)

    // AndroidX
    implementation(libs.androidx.activity.compose)
    implementation(libs.androidx.constraintlayout.compose)
    implementation(libs.androidx.corektx)
    implementation(libs.androidx.appcompat)
    implementation(libs.google.material)
    implementation(libs.androidx.constraintlayout)

    // Debug
    debugImplementation(libs.compose.ui.tooling)
    debugImplementation(libs.compose.ui.test.manifest)

    // Leak Canary (for debug builds only)
    debugImplementation(libs.leakcanary.android)

    testImplementation(libs.junit)

    androidTestImplementation(libs.androidx.test.corektx)
    androidTestImplementation(libs.androidx.test.ext.junitktx)
    androidTestImplementation(libs.androidx.test.runner)
    androidTestImplementation(libs.androidx.test.rules)
    androidTestImplementation(libs.androidx.test.espresso.core)
}

task generateSampleLayouts {
    description = 'Converts yml sample layouts to json files to be merged into assets.'

    def inFiles = fileTree(dir: 'sample-layouts', include: ['*.yml', '*.yaml'])
    def outDir = file("$buildDir/generated/sample_layout_assets/sample_layouts")

    inputs.files(inFiles.toList()).withPropertyName('sourceFiles')
    outputs.dir(outDir).withPropertyName('outputDir')
    outputs.cacheIf {true }

    def yamlReader = new ObjectMapper(new YAMLFactory())
    def jsonWriter = new ObjectMapper()

    doLast {
        if (outDir.exists()) {
            outDir.delete()
        }
        outDir.mkdirs()

        inFiles.each { input ->
            def name = input.getName().replaceFirst(~/ya?ml/, "json")
            def outFile = file("$outDir/$name")
            outFile.createNewFile()

            def yaml = yamlReader.readValue(input, Object.class)
            jsonWriter.writeValue(outFile, yaml)
        }
    }
}

// Workaround lint/gradle task issues with the generated assets
afterEvaluate {
    android.applicationVariants.configureEach { variant ->
        def targetName = variant.name.capitalize()
        def lintVitalAnalyzeTask = tasks.findByName("lintVitalAnalyze${targetName}")
        if (lintVitalAnalyzeTask != null) {
            lintVitalAnalyzeTask.dependsOn generateSampleLayouts
        }
        def lintAnalyzeTask = tasks.findByName("lintAnalyze${targetName}")
        if (lintAnalyzeTask != null) {
            lintAnalyzeTask.dependsOn generateSampleLayouts
        }
        def generateLintReportModelTask = tasks.findByName("generate${targetName}LintReportModel")
        if (generateLintReportModelTask != null) {
            generateLintReportModelTask.dependsOn generateSampleLayouts
        }
        def generateLintVitalReportModelTask = tasks.findByName("generate${targetName}LintVitalReportModel")
        if (generateLintVitalReportModelTask != null) {
            generateLintVitalReportModelTask.dependsOn generateSampleLayouts
        }
        def generateAssetsTask = tasks.findByName("generate${targetName}Assets")
        generateAssetsTask.dependsOn(generateSampleLayouts)
    }
}
